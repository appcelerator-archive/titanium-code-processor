#!/usr/bin/env node
/**
 * <p>Copyright (c) 2012 by Appcelerator, Inc. All Rights Reserved.
 * Please see the LICENSE file for information about licensing.</p>
 *
 * Provides a CLI for the code processor unit tests
 * @author Bryan Hughes &lt;<a href='mailto:bhughes@appcelerator.com'>bhughes@appcelerator.com</a>&gt;
 */

var path = require('path'),
	fs = require('fs'),

	winston = require('winston'),

	CodeProcessor = require('../../lib/CodeProcessor'),
	Runtime = require('../../lib/Runtime'),
	Base = require('../../lib/Base'),

	file = process.argv[2],
	logger,
	result,
	silent = false;

// Validate the file argument
if (!file) {
	if (!silent) {
		console.error('**** File not specified');
	}
	process.exit(1);
}
if (!(fs.existsSync || path.existsSync)(file)) {
	if (!silent) {
		console.error('**** Invalid file ' + file);
	}
	process.exit(1);
}
if (!silent) {
	console.log('Processing file "' + file + '"');
}

// Create the logger
logger = new (winston.Logger)({
	transports: [
		new (winston.transports.Console)({ level: silent ? 'critical' : 'error'})
	],
	levels: {
		trace: 0,
		debug: 1,
		info: 2,
		notice: 3,
		warn: 4,
		error: 5,
		critical: 6
	}
});

// Run the test
try {

	result = CodeProcessor.run(file, {
		exactMode: true
	}, [], logger);
	if (result && result[0] === 'throw') {
		if (result[1]) {
			var value;
			switch(Base.type(result[1])) {
				case 'String': value = result[1].value; break;
				case 'Object': value = result[1]._lookupProperty.message.value.value; break;
			}
		} else {
			console.error('**** Internal error: missing throw value at line ' + Runtime.getCurrentLocation().line);
		}
		if (!silent) {
			console.log('Exception thrown: ' + value);
		}
		process.exit(1);
	}
	result = CodeProcessor.getResults();
	if (result.errors.length) {
		if (!silent) {
			console.log('Error generated: ' + result.errors[0].description);
		}
		process.exit(1);
	}
	if (!silent) {
		console.log('Code exited properly');
	}
	process.exit(0);
} catch(e) {
	console.error('**** Internal error: ' + e.message);
	throw e;
}