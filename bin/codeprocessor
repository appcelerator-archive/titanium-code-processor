#!/usr/bin/env node

/**
 * @fileoverview rovides a CLI interface into the code processor API
 * @author Bryan Hughes <bhughes@appcelerator.com>
 */

// ******** Requires and File-Level Variables ********

var path = require('path'),
	fs = require('fs'),
	exec = require('child_process').exec,
	existsSync = fs.existsSync || path.existsSync,

	wrench = require('wrench'),
	nomnom = require('nomnom'),
	winston = require('winston'),
	async = require('async'),
	xml2js = require('xml2js'),
	Table = require('cli-table'),

	appc = require('node-appc'),

	CodeProcessor = require(path.resolve(path.join(__dirname, '..'))),
	Runtime = require(path.resolve(path.join(__dirname, '..', 'lib', 'Runtime'))),

	subcommand = process.argv.splice(2, 1)[0];

switch(subcommand) {
	case 'plugins':
		queryPlugins();
		break;
	case 'options':
		queryOptions();
		break;
	case 'analyze':
		printHeader();
		analyze();
		break;
	case 'subprocess':
		subprocess();
		break;
	case 'help':
	case '--help':
	case '-h':
		printHeader();
		printHelp();
		break;
	case undefined:
		printHeader();
		console.log('\nMissing sub-command');
		printHelp();
		process.exit(1);
		break;
	default:
		printHeader();
		console.log('\nUnknown sub-command "' + subcommand + '"');
		printHelp();
		process.exit(1);
		break;
}

function printHeader() {
	console.log('Titanium Code Processor v' +
		JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json').toString())).version + '\n' +
		'Copyright (c) 2012-2013, Appcelerator, Inc.  All Rights Reserved.');
}

function printHelp() {
	console.log(
		'\n' +
		'Usage: titanium-code-processor analyze [options]\n' +
		'       titanium-code-processor subprocess <config-file-path>\n' +
		'       titanium-code-processor plugins [<search path> [<search path> [...]]]\n' +
		'       titanium-code-processor options\n\n' +
		'Sub-commands:\n' +
		'   analyze      Analyzes a project\n' +
		'   subprocess   Analyzes a project using the supplied config file in subprocess mode\n' +
		'   plugins      Queries the plugins in the default search path and the listed search paths\n' +
		'   options      Queries the options\n');
}

function queryPlugins() {
	CodeProcessor.queryPlugins([], function (err, results) {
		if (err) {
			console.error(err);
			process.exit(1);
		} else {
			console.log(JSON.stringify(results, false, '\t'));
		}
	});
}

function queryOptions() {
	CodeProcessor.queryOptions(function (err, results) {
		if (err) {
			console.error(err);
			process.exit(1);
		} else {
			console.log(JSON.stringify(results, false, '\t'));
		}
	});
}

function subprocess() {
	var config = process.argv[2],
		studioInterface,
		filename,
		logger;

	// Parse the config file
	if (typeof config === 'undefined') {
		console.error('Config file not specified');
		process.exit(1);
	}
	if (!existsSync(config)) {
		console.error('Could not find config file "' + config + '"');
		process.exit(1);
	}
	try {
		config = JSON.parse(fs.readFileSync(config));
	} catch(e) {
		console.error('Could not parse config file: ' + e);
		process.exit(1);
	}

	// Validate the entry point
	if (!config.entryPoint) {
		console.error('Missing entry point in config file');
		process.exit(1);
	}
	if (!existsSync(config.entryPoint)) {
		console.error('Could not find entry point "' + config.entryPoint + '"');
		process.exit(1);
	}

	// Validate the logging and create the logger
	if (config.logging && config.logging.file) {
		filename = config.logging.file.path;
		if (typeof filename === 'undefined') {
			console.error('Path not specified in file logging section');
			process.exit(1);
		}
		if (['trace', 'debug', 'info', 'notice', 'warn', 'error'].indexOf(config.logging.file.level) === -1) {
			console.error('Unknown log level "' + config.logging.file.level + '"');
		}
		if (!existsSync(path.dirname(filename))) {
			wrench.mkdirSyncRecursive(path.dirname(filename));
		}
		logger = new (winston.Logger)({
			transports: [
				new (winston.transports.File)({
					filename: path.resolve(filename),
					level: config.logging.file.level
				})
			],
			levels: {
				trace: 0,
				debug: 1,
				info: 2,
				notice: 3,
				warn: 4,
				error: 5
			}
		});
	}

	// Create the interface
	studioInterface = appc.messaging.create('stdio');
	studioInterface.open();

	function callback(error) {
		if (error) {
			Runtime.log('error', 'Error communicating with studio: ' + error);
		}
	}

	Runtime.on('enteredFile', function(e) {
		studioInterface.send('enteredFile', e.data.filename, callback);
	});

	Runtime.on('projectProcessingBegin', function() {
		studioInterface.send('projectProcessingBegin', undefined, callback);
	});

	Runtime.on('projectProcessingEnd', function() {
		studioInterface.send('projectProcessingEnd', undefined, callback);
	});

	Runtime.on('warningReported', function(e) {
		var results = {
			type: e.data.name,
			description: e.data.description,
			filename: e.filename,
			line: e.line,
			column: e.column
		};
		studioInterface.send('warningReported', results, callback);
	});

	Runtime.on('errorReported', function(e) {
		var results = {
			type: e.data.name,
			description: e.data.description,
			filename: e.filename,
			line: e.line,
			column: e.column
		};
		studioInterface.send('errorReported', results, callback);
	});

	Runtime.on('consoleOutput', function(e) {
		var results = {
			level: e.data.level,
			message: e.data.message
		};
		studioInterface.send('consoleOutput', results, callback);
	});

	// Run the code processor
	CodeProcessor.run(path.resolve(config.entryPoint), config.options, config.plugins, logger);
	studioInterface.send('results', CodeProcessor.getResults(), function () {
		studioInterface.close();
		process.exit(0);
	});
}

function analyze() {
	processAnalayzeInput(function (entryPoint, options, plugins, logger) {

		// Make sure that the project exists
		if (!existsSync(entryPoint)) {
			console.error('project root "' + entryPoint + '" does not exist.\n');
			process.exit(1);
		}
		setTimeout(function(){
			var startTime = (new Date()).getTime(),
				results,
				table,
				i, len,
				entry,
				pluginResults,
				entries;

			CodeProcessor.run(entryPoint, options, plugins, logger);
			results = CodeProcessor.getResults();

			if (logger) {
				logger.log('info', 'Code processing finished successfully in ' + ((new Date()).getTime() - startTime) + ' ms.');
			}

			// Log the results
			console.log();
			if (results.errors.length) {
				console.log('Errors');
				table = new Table({
					head: ['Description', 'File', 'Line']
				});
				for (i = 0, len = results.errors.length; i < len; i++) {
					entry = results.errors[i];
					table.push([entry.description, entry.filename || '', entry.line || 0]);
				}
				console.log(table.toString() + '\n');
			}
			if (results.warnings.length) {
				console.log('Warnings');
				table = new Table({
					head: ['Description', 'File', 'Line']
				});
				for (i = 0, len = results.warnings.length; i < len; i++) {
					entry = results.warnings[i];
					table.push([entry.description, entry.filename || '', entry.line || 0]);
				}
				console.log(table.toString() + '\n');
			}
			pluginResults = results.plugins['analysis-coverage'];
			if (pluginResults) {
				console.log('Analysis Coverage');
				if (pluginResults.filesSkipped.length) {
					console.log(' Files Not Analyzed');
					table = new Table({
						head: ['File']
					});
					entries = pluginResults.filesSkipped;
					for (i = 0, len = entries.length; i < len; i++) {
						table.push([pluginResults.filesSkipped[i]]);
					}
					console.log(table.toString() + '\n ' + pluginResults.numFilesSkipped +
						' files skipped out of ' + pluginResults.numTotalFiles + ' total files\n');
				}
				console.log(' File Content Coverage');
				table = new Table({
					head: ['File', 'Nodes Visited', 'Nodes Skipped', 'Total Nodes']
				});
				entries = Object.keys(pluginResults.details);
				for (i = 0, len = entries.length; i < len; i++) {
					entry = pluginResults.details[entries[i]];
					table.push([entries[i], entry.numNodesVisited,
						entry.numNodesSkipped, entry.numTotalNodes]);
				}
				console.log(table.toString() + '\n ' +
					pluginResults.numNodesVisited + ' nodes visited and ' +
					pluginResults.numNodesSkipped + ' nodes skipped out of ' +
					pluginResults.numTotalNodes + ' nodes total (' +
					Math.round(100 * (pluginResults.numNodesVisited + pluginResults.numNodesSkipped) /
						pluginResults.numTotalNodes) + '%)\n');
			}
			pluginResults = results.plugins['ti-api-usage-finder'];
			if (pluginResults) {
				pluginResults = pluginResults.global;
				entries = Object.keys(pluginResults);
				if (entries.length) {
					console.log('Titanium API Usage');
					table = new Table({
						head: ['API', 'Num References']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						table.push([entries[i], pluginResults[entries[i]]]);
					}
					console.log(table.toString() + '\n');
				}
			}
			pluginResults = results.plugins['require-finder'];
			if (pluginResults) {
				entries = Object.keys(pluginResults.resolved);
				if (entries.length) {
					console.log('Required Modules Resolved');
					table = new Table({
						head: ['Required File Name', 'Source File', 'Line']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						entry = pluginResults.resolved[entries[i]];
						table.push([entry.data.name, entry.filename || '', entry.line || 0]);
					}
					console.log(table.toString() + '\n');
				}
				entries = Object.keys(pluginResults.unresolved);
				if (entries.length) {
					console.log('Required Modules Unresolved');
					table = new Table({
						head: ['Required File Name', 'Source File', 'Line']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						entry = pluginResults.unresolved[entries[i]];
						table.push([entry.data.name ? entry.data.name :
							'<Could not resolve name>', entry.filename || '', entry.line || 0]);
					}
					console.log(table.toString() + '\n');
				}
				entries = Object.keys(pluginResults.missing);
				if (entries.length) {
					console.log('Required Modules Missing');
					table = new Table({
						head: ['Required File Name', 'Source File', 'Line']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						entry = pluginResults.missing[entries[i]];
						table.push([entry.data.name, entry.filename || '', entry.line || 0]);
					}
					console.log(table.toString() + '\n');
				}
				entries = Object.keys(pluginResults.skipped);
				if (entries.length) {
					console.log('Required Native Modules Skipped');
					table = new Table({
						head: ['Required File Name', 'Source File', 'Line']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						entry = pluginResults.skipped[entries[i]];
						table.push([entry.data.name, entry.filename || '', entry.line || 0]);
					}
					console.log(table.toString() + '\n');
				}
			}
			pluginResults = results.plugins['ti-api-include-finder'];
			if (pluginResults) {
				entries = Object.keys(pluginResults.resolved);
				if (entries.length) {
					console.log('Ti.include Files Resolved');
					table = new Table({
						head: ['Included File Name', 'Source File', 'Line']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						entry = pluginResults.resolved[entries[i]];
						table.push([entry.data.filename ? entry.data.filename :
							'<Could not resolve name>', entry.filename || '', entry.line || 0]);
					}
					console.log(table.toString() + '\n');
				}
				entries = Object.keys(pluginResults.unresolved);
				if (entries.length) {
					console.log('Ti.include Files Unresolved');
					table = new Table({
						head: ['Included File Name', 'Source File', 'Line']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						entry = pluginResults.unresolved[entries[i]];
						table.push([entry.data.filename ? entry.data.filename :
							'<Could not resolve name>', entry.filename || '', entry.line || 0]);
					}
					console.log(table.toString() + '\n');
				}
				entries = Object.keys(pluginResults.missing);
				if (entries.length) {
					console.log('Ti.include Files Missing');
					table = new Table({
						head: ['Included File Name', 'Source File', 'Line']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						entry = pluginResults.missing[entries[i]];
						table.push([entry.data.filename ? entry.data.filename :
							'<Could not resolve name>', entry.filename || '', entry.line || 0]);
					}
					console.log(table.toString() + '\n');
				}
			}
			pluginResults = results.plugins['ti-api-deprecation-finder'];
			if (pluginResults) {
				entries = Object.keys(pluginResults.deprecatedAPIs);
				if (entries.length) {
					console.log('Deprecated Titanium API References');
					table = new Table({
						head: ['API', 'Num References']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						table.push([entries[i], pluginResults.deprecatedAPIs[entries[i]]]);
					}
					console.log(table.toString() + '\n');
				}
			}
			pluginResults = results.plugins['ti-api-platform-validator'];
			if (pluginResults) {
				entries = Object.keys(pluginResults.invalidAPIs);
				if (entries.length) {
					console.log('Invalid Platform-Specific Titanium API References');
					table = new Table({
						head: ['API', 'Num References']
					});
					for (i = 0, len = entries.length; i < len; i++) {
						table.push([entries[i], pluginResults.invalidAPIs[entries[i]]]);
					}
					console.log(table.toString() + '\n');
				}
			}
			pluginResults = results.plugins['unknown-callback-detector'];
			if (pluginResults && pluginResults.length) {
				console.log('Unknown Callback Detector');
				table = new Table({
					head: ['File', 'Line']
				});
				entries = pluginResults;
				for (i = 0, len = entries.length; i < len; i++) {
					entry = entries[i];
					table.push([entry.filename || '', entry.line || 0]);
				}
				console.log(table.toString() + '\n');
			}
		}, 0);
	});
}

function processAnalayzeInput(callback) {
	var parsedOptions = nomnom
			.option('plugin', {
				abbr: 'p',
				metavar: 'MODULE_NAME',
				list: true,
				type: 'string',
				help: 'Name of the plugin module to include'
			})
			.option('config', {
				abbr: 'c',
				metavar: 'CONFIG_OPTION=VALUE',
				list: true,
				help: 'Processor options, defined as "key=value"'
			})
			.option('log-level', {
				abbr: 'l',
				metavar: 'LOG_LEVEL',
				default: 'info',
				help: 'The logging level',
				choices: ['error', 'warn', 'notice', 'info', 'debug', 'trace']
			})
			.option('osname', {
				abbr: 'o',
				metavar: 'PLATFORM',
				help: 'The name of the OS being built-for. Reflected in code via Ti.Platform.osname',
				choices: ['ios', 'iphone', 'ipad', 'android', 'mobileweb']
			})
			.option('project-dir', {
				abbr: 'd',
				metavar: 'PROJECT_DIR',
				help: 'The path to the project or file to analyze',
				type: 'string'
			})
			.option('config-file', {
				abbr: 'f',
				metavar: 'CONFIG_FILE_PATH',
				help: 'The path to the config file. Note: when this flag is specified, all other flags are ignored',
				type: 'string'
			})
			.option('results-dir', {
				abbr: 'r',
				metavar: 'RESULTS_DIR',
				help: 'The path to the directory that will contain the results',
				type: 'string'
			})
			.option('all-plugins', {
				abbr: 'a',
				help: 'Loads all plugins in the default search path',
				flag: true
			})
			.option('non-ti-plugins', {
				abbr: 't',
				help: 'Loads all non-titanium specific plugins in the default search path',
				flag: true
			})
			.script('titanium-code-processor analyze')
			.help('Processes the supplied project using the given plugins.')
			.nom(),
		i,
		len,
		configOption,
		config = parsedOptions['config-file'],
		filename,
		transports = [],
		options = {},
		projectRoot = '.',
		entryPoint,
		startTime,
		logger,
		tiRegex = /^ti-/;

	// Check if a config file was specified
	if (parsedOptions['config-file']) {

		// Parse the config file
		if (typeof config === 'undefined') {
			console.error('Config file not specified');
			process.exit(1);
		}
		if (!existsSync(config)) {
			console.error('Could not find config file "' + config + '"');
			process.exit(1);
		}
		try {
			config = JSON.parse(fs.readFileSync(config));
		} catch(e) {
			console.error('Could not parse config file: ' + e);
			process.exit(1);
		}

		// Validate the entry point
		if (!config.entryPoint) {
			console.error('Missing entry point in config file');
			process.exit(1);
		}
		if (!existsSync(config.entryPoint)) {
			console.error('Could not find entry point "' + config.entryPoint + '"');
			process.exit(1);
		}

		// Validate the logging and create the logger
		if (config.logging) {
			if (config.logging.file) {
				filename = config.logging.file.path;
				if (typeof filename === 'undefined') {
					console.error('Path not specified in file logging section');
					process.exit(1);
				}
				if (['trace', 'debug', 'info', 'notice', 'warn', 'error'].indexOf(config.logging.file.level) === -1) {
					console.error('Unknown log level "' + config.logging.file.level + '"');
					process.exit(1);
				}
				if (!existsSync(path.dirname(filename))) {
					wrench.mkdirSyncRecursive(path.dirname(filename));
				}
				transports.push(new (winston.transports.File)({
					filename: path.resolve(filename),
					level: config.logging.file.level
				}));
			}

			if (config.logging.console) {
				if (['trace', 'debug', 'info', 'notice', 'warn', 'error'].indexOf(config.logging.console.level) === -1) {
					console.error('Unknown log level "' + config.logging.console.level + '"');
					process.exit(1);
				}
				transports.push(new (winston.transports.Console)({
					level: config.logging.console.level
				}));
			}

			logger = new (winston.Logger)({
				transports: transports,
				levels: {
					trace: 0,
					debug: 1,
					info: 2,
					notice: 3,
					warn: 4,
					error: 5
				}
			});
		}

		if (!config.options) {
			config.options = {};
		}
		if (typeof config.options !== 'object' || Array.isArray(config.options)) {
			console.error('Config "options" entry must be an object');
			process.exit(1);
		}

		if (!config.plugins) {
			config.plugins = [];
		}
		if (typeof config.plugins !== 'object' || !Array.isArray(config.plugins)) {
			console.error('Config "plugins" entry must be an array');
			process.exit(1);
		}

		callback(config.entryPoint, config.options, config.plugins, logger);
	} else {

		if (!parsedOptions.osname) {
			console.error('\n"osname" argument is required when not using a config file\n');
			process.exit(1);
		}

		// Create the logger
		if (['trace', 'debug', 'info', 'notice', 'warn', 'error'].indexOf(parsedOptions['log-level']) === -1) {
			console.error('Unknown log level "' + parsedOptions['log-level'] + '"');
			process.exit(1);
		}
		logger = new (winston.Logger)({
			transports: [
				new (winston.transports.Console)({ level: parsedOptions['log-level'] })
			],
			levels: {
				trace: 0,
				debug: 1,
				info: 2,
				notice: 3,
				warn: 4,
				error: 5
			}
		});

		// Parse the config options
		if (parsedOptions.config) {
			for(i = 0, len = parsedOptions.config.length; i < len; i++) {
				configOption = parsedOptions.config[i].split('=');
				if (configOption.length !== 2) {
					console.error('Invalid option "' + parsedOptions.config[i] + '"\n');
					process.exit(1);
				}
				switch(configOption[0]) {
					case 'invokeMethods':
						options.invokeMethods = configOption[1] === 'true';
						break;
					case 'evaluateLoops':
						options.evaluateLoops = configOption[1] === 'true';
						break;
					case 'maxLoopIterations':
						options.maxLoopIterations = parseInt(configOption[1], 10);
						break;
					case 'maxRecursionLimit':
						options.maxRecursionLimit = parseInt(configOption[1], 10);
						break;
					case 'logConsoleCalls':
						options.logConsoleCalls = configOption[1] === 'true';
						break;
					case 'executionTimeLimit':
						options.executionTimeLimit = parseInt(configOption[1], 10);
						break;
					case 'exactMode':
						options.exactMode = configOption[1] === 'true';
						break;
					case 'nativeExceptionRecovery':
						options.nativeExceptionRecovery = configOption[1] === 'true';
						break;
					case 'processUnvisitedCode':
						options.processUnvisitedCode = configOption[1] === 'true';
						break;
					default:
						console.error('Invalid option "' + parsedOptions.config[i] + '"\n');
						process.exit(1);
				}
			}
		}

		// Calculate the project root
		if (parsedOptions['project-dir']) {
			projectRoot = parsedOptions['project-dir'];
		}
		projectRoot = path.resolve(projectRoot);

		// Store the results dir
		options.resultsPath = parsedOptions['results-dir'];

		// Check if we are processing a project or a single file
		if (/\.js$/.test(projectRoot)) {
			CodeProcessor.queryPlugins([], function(err, results) {
				var plugins = [],
					pluginList = parsedOptions.plugin || [],
					i, len,
					plugin;
				startTime = (new Date()).getTime();

				// Parse the plugins
				if (parsedOptions['all-plugins']) {
					for(plugin in results) {
						if (!tiRegex.test(plugin)) {
							plugins.push({
								name: plugin,
								path: results[plugin].path,
								options: {}
							});
						} else if (logger) {
							logger.warn('Plugin "' + plugin + '" is not supported when parsing individual files');
						}
					}
				} else if (parsedOptions['non-ti-plugins']) {
					for(plugin in results) {
						if (!tiRegex.test(plugin)) {
							plugins.push({
								name: plugin,
								path: results[plugin].path,
								options: {}
							});
						}
					}
				} else if (pluginList) {
					for(i = 0, len = pluginList.length; i < len; i++) {
						plugin = pluginList[i];
						if (plugin in results) {
							if (tiRegex.test(plugin)) {
								if (logger) {
									logger.warn('Plugin "' + plugin + '"  is not supported when parsing individual files');
								}
							} else {
								plugins.push({
									name: plugin,
									path: results[plugin].path,
									options: {}
								});
							}
						} else if (logger) {
							logger.warn('Plugin "' + plugin + '" is unknown');
						}
					}
				}
				for (i = 0, len = plugins.length; i < len; i++) {
					if (plugins[i].name === 'require-provider') {
						plugins[i].options.platform = parsedOptions.osname;
					}
				}

				callback(projectRoot, options, plugins, logger);
			});
		} else {
			entryPoint = path.join(projectRoot, 'Resources', 'app.js');
			if (!existsSync(entryPoint)) {
				console.error(projectRoot + ' does not appear to be a valid Titanium Mobile project.\n');
				process.exit(1);
			} else {
				if (logger) {
					logger.info('Analyzing project at "' + projectRoot + '"');
				}
				exec('titanium project --no-prompt --project-dir "' + projectRoot + '"', { stdio: 'inherit'}, function (err) {
					var tasks = {
						tiappxml: function (next) {
							(new xml2js.Parser()).parseString(fs.readFileSync(path.join(projectRoot, 'tiapp.xml')), function (err, data) {
								if (err) {
									next(err);
								} else {
									next(null, data);
								}
							});
						},
						modules: function (next) {
							exec('titanium module --no-prompt -o json --project-dir "' + projectRoot + '"', function (err, stdout) {
								if (err) {
									next(err);
								} else {
									next(null, JSON.parse(stdout));
								}
							});
						},
						project: function (next) {
							exec('titanium project --no-prompt -o json --project-dir "' + projectRoot + '"', function (err, stdout) {
								if (err) {
									next(err);
								} else {
									next(null, JSON.parse(stdout));
								}
							});
						},
						info: function (next) {
							exec('titanium info --no-prompt -t titanium -o json', function (err, stdout) {
								if (err) {
									next(err);
								} else {
									next(null, JSON.parse(stdout));
								}
							});
						}
					};

					if (err) {
						if (logger) {
							logger.error('Could not run the "titanium project" command: ' + err +
								'Make sure that the Titanium CLI is installed and a 3.0 or newer SDK is installed.\n');
						}
					} else {
						async.parallel(tasks, function (err, result) {
							if (err) {
								if (logger) {
									logger.error(err);
								}
							} else {

								// Create the plugin info
								CodeProcessor.queryPlugins([], function(err, results) {
									var sdkVersion,
										sdkInfo,
										projectModules,
										globalModules,
										moduleList,
										modules = {},
										i, len,
										pluginList = parsedOptions.plugin,
										plugins = [],
										plugin;

									if (parsedOptions['all-plugins']) {
										for(plugin in results) {
											plugins.push({
												name: plugin,
												path: results[plugin].path,
												options: {}
											});
										}
									} else if (parsedOptions['non-ti-plugins']) {
										for(plugin in results) {
											if (!tiRegex.test(plugin)) {
												plugins.push({
													name: plugin,
													path: results[plugin].path,
													options: {}
												});
											}
										}
									} else if (pluginList) {
										for(i = 0, len = pluginList.length; i < len; i++) {
											plugin = pluginList[i];
											if (plugin in results) {
												plugins.push({
													name: plugin,
													path: results[plugin].path,
													options: {}
												});
											} else if (logger) {
												logger.warn('Plugin "' + pluginList[i] + '" is unknown');
											}
										}
									}

									// Parse the CLI queries
									if (result.info && result.modules && result.project) {

										// Get the SDK path
										sdkVersion = result.tiappxml['ti:app']['sdk-version'];
										if (sdkVersion) {
											sdkVersion = sdkVersion[0].match(/^([0-9]\.[0-9]\.[0-9]).*$/)[1];
										} else {
											sdkVersion = Object.keys(result.info.titanium).sort().pop();
										}
										sdkInfo = result.info.titanium[sdkVersion];
										if (!sdkInfo) {
											if (result.info.titanium[sdkVersion + '.GA']) {
												sdkVersion = sdkVersion + '.GA';
												sdkInfo = result.info.titanium[sdkVersion];
											} else {
												if (logger) {
													logger.error('SDK version ' + sdkVersion + ' is not available\n');
												}
												process.exit(1);
											}
										}

										// Get the list of modules from the tiapp.xml
										projectModules = result.modules.project;
										globalModules = result.modules.global;
										moduleList = result.tiappxml['ti:app'].modules && result.tiappxml['ti:app'].modules[0].module;
										if (moduleList) {
											moduleList.forEach(function (module) {
												var platform = module.$.platform,
													name = module._,
													version = module.$.version,
													moduleEntry;
												if (platform) {
													if (!modules[platform]) {
														modules[platform] = {};
													}
													if (platform === 'commonjs') {
														if (projectModules && projectModules.commonjs && projectModules.commonjs[name]) {
															moduleEntry = projectModules.commonjs[name];
														} else if (globalModules && globalModules.commonjs && globalModules.commonjs[name]) {
															moduleEntry = globalModules.commonjs[name];
														}
														if (moduleEntry) {
															if (version) {
																moduleEntry = moduleEntry[version];
																if (!moduleEntry) {
																	logger.error('Version ' + version + ' of ' + name + ' does not exist');
																	process.exit(1);
																}
															} else {
																moduleEntry = moduleEntry[Object.keys(moduleEntry).sort().pop()];
															}
															modules[platform][name] = path.join(moduleEntry.modulePath, JSON.parse(
																fs.readFileSync(path.join(moduleEntry.modulePath, 'package.json'))).main + '.js');
														}
													} else {
														modules[platform][name] = '';
													}
												} else {
													if (!modules[parsedOptions.osname]) {
														modules[parsedOptions.osname] = {};
													}
													modules[parsedOptions.osname][name] = ''; // Kinda hacky, but good enough for this script
												}
											});
										}
										for(i = 0, len = plugins.length; i < len; i++) {
											if (plugins[i].name === 'require-provider') {
												plugins[i].options.modules = modules;
											} else if (plugins[i].name === 'ti-api-processor') {
												plugins[i].options.sdkPath = sdkInfo.path;
											}
										}
									}
									for(i = 0, len = plugins.length; i < len; i++) {
										if (plugins[i].name === 'require-provider') {
											plugins[i].options.platform = parsedOptions.osname;
										} else if (plugins[i].name === 'ti-api-platform-validator') {
											plugins[i].options.platform = parsedOptions.osname;
										} else if (plugins[i].name === 'ti-api-processor') {
											plugins[i].options.platform = parsedOptions.osname;
										} else if (plugins[i].name === 'analysis-coverage') {
											plugins[i].options.visualization = {
												outputDirectory: path.join(options.resultsPath, 'analysis-coverage')
											};
										} else if (plugins[i].name === 'unknown-ambiguous-visualizer') {
											plugins[i].options.visualization = {
												outputDirectory: path.join(options.resultsPath, 'unknown-ambiguous-visualizer')
											};
										}
									}
									callback(entryPoint, options, plugins, logger);
								});
							}
						});
					}
				});
			}
		}
	}
}
