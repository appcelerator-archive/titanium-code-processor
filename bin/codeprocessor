#!/usr/bin/env node

/**
 * @fileoverview rovides a CLI interface into the code processor API
 * @author Bryan Hughes <bhughes@appcelerator.com>
 */

// ******** Requires and File-Level Variables ********

var util = require('util'),
	path = require('path'),
	fs = require('fs'),
	exec = require('child_process').exec,
	existsSync = fs.existsSync || path.existsSync,

	nomnom = require('nomnom'),
	winston = require('winston'),
	async = require('async'),
	xml2js = require('xml2js'),
	request = require('request'),
	Table = require('cli-table'),
	
	CodeProcessor = require(path.resolve(path.join(__dirname, '..'))),

// ******** CLI Options Parsing ********

// Process the cli args
	parsedOptions = nomnom
		.option('plugin', {
			abbr: 'p',
			metavar: 'MODULE_NAME',
			list: true,
			type: 'string',
			help: 'Name of the plugin module to include'
		})
		.option('config', {
			abbr: 'c',
			metavar: 'CONFIG_OPTION=VALUE',
			list: true,
			help: 'Processor options, defined as "key=value"'
		})
		.option('verbose', {
			abbr: 'v',
			flag: true,
			help: 'Enable verbose logging. Equivalent to "-l debug"'
		})
		.option('log-level', {
			abbr: 'l',
			metavar: 'LOG_LEVEL',
			default: 'info',
			help: 'The logging level',
			choices: ['error', 'warn', 'notice', 'info', 'debug', 'trace']
		})
		.option('silent', {
			abbr: 's',
			flag: true,
			help: 'Suppresses all output, including errors, and only prints the results. Useful when combined with -j'
		})
		.option('json', {
			abbr: 'j',
			flag: true,
			help: 'Outputs the results in JSON format'
		})
		.option('osname', {
			abbr: 'o',
			metavar: 'PLATFORM',
			help: 'The name of the OS being built-for. Reflected in code via Ti.Platform.osname',
			choices: ['ios', 'iphone', 'ipad', 'android', 'mobileweb'],
			required: true
		})
		.option('report', {
			abbr: 'r',
			help: 'Generates a report after the code processor has run to send to Appcelerator for debugging',
			flag: true
		})
		.option('report-with-message', {
			abbr: 'm',
			help: 'Generates a report after the code processor has run to send to Appcelerator for debugging along with a custom message',
		})
		.script('titanium-code-processor -o <platform> [project-dir]')
		.help('Processes the supplied project using the given plugins.')
		.nom(),
	i,
	len,
	configOption,
	options = {},
	projectRoot = '.',
	plugins,
	entryPoint,
	startTime,
	result,
	logger;

if (!parsedOptions.silent) {
	// Create the logger
	logger = new (winston.Logger)({
		transports: [
			new (winston.transports.Console)({ level: parsedOptions.verbose ? 'trace' : parsedOptions['log-level'] })
		],
		levels: {
			trace: 0,
			debug: 1,
			info: 2,
			notice: 3,
			warn: 4,
			error: 5
		}
	});
}

// Parse the config options
if (parsedOptions.config) {
	for(i = 0, len = parsedOptions.config.length; i < len; i++) {
		configOption = parsedOptions.config[i].split('=');
		if (configOption.length !== 2) {
			console.error('Invalid option "' + parsedOptions.config[i] + '"\n');
			process.exit(1);
		}
		switch(configOption[0]) {
			case 'invokeMethods':
				options.invokeMethods = configOption[1] === 'true';
				break;
			case 'evaluateLoops':
				options.evaluateLoops = configOption[1] === 'true';
				break;
			case 'maxLoopIterations':
				options.maxLoopIterations = parseInt(configOption[1], 10);
				break;
			case 'maxRecursionLimit':
				options.maxRecursionLimit = parseInt(configOption[1], 10);
				break;
			case 'logConsoleCalls':
				options.logConsoleCalls = configOption[1] === 'true';
				break;
			case 'executionTimeLimit':
				options.executionTimeLimit = parseInt(configOption[1], 10);
				break;
			case 'exactMode':
				options.exactMode = configOption[1] === 'true';
				break;
			case 'nativeExceptionRecovery':
				options.nativeExceptionRecovery = configOption[1] === 'true';
				break;
			default:
				console.error('Invalid option "' + parsedOptions.config[i] + '"\n');
				process.exit(1);
		}
	}
}

// Calculate the project root
if (parsedOptions[0]) {
	projectRoot = parsedOptions[0];
}
projectRoot = path.resolve(projectRoot);

// Make sure that the project exists
if (!existsSync(projectRoot)) {
	console.error('project root "' + projectRoot + '" does not exist.\n');
	process.exit(1);
}

// Get the list of plugins
plugins = parsedOptions.plugin;

// Check if we are processing a project or a single file
if (/\.js$/.test(projectRoot)) {
	startTime = (new Date()).getTime();
	options.platform = parsedOptions.osname;
	result = CodeProcessor.process([projectRoot], plugins, options, logger);
	if (logger) {
		logger.log('info', 'Code processing finished successfully in ' + ((new Date()).getTime() - startTime) + ' ms.');
		logger.log('info', util.inspect(CodeProcessor.getResults(), false, 4));
	}
				
	process.exit(result && result[0] === 'normal' ? 0 : 1);
} else {
	entryPoint = path.join(projectRoot, 'Resources', 'app.js');
	if (!existsSync(entryPoint)) {
		console.error(projectRoot + ' does not appear to be a valid Titanium Mobile project.\n');
		process.exit(1);
	} else {
		if (logger) {
			logger.info('Analyzing project at "' + projectRoot + '"');
		}
		async.series([
			function (next) {
				exec('titanium', next);
			},
			function (next) {
				exec('titanium project --project-dir "' + projectRoot + '"', next);
			}
		], function (err) {
			var tasks = {
				tiappxml: function (next) {
					(new xml2js.Parser()).parseString(fs.readFileSync(path.join(projectRoot, 'tiapp.xml')), function (err, data) {
						if (err) {
							next(err);
						} else {
							next(null, data);
						}
					});
				}
			};

			if (err) {
				if (logger) {
					logger.error('Could not run the "titanium" command: ' + err +
						'Make sure that the Titanium CLI is installed and a 3.0 or newer SDK is installed.\n');
				}
			} else {
				tasks.modules = function (next) {
					exec('titanium module -o json --project-dir "' + projectRoot + '"', function (err, stdout) {
						if (err) {
							next(err);
						} else {
							next(null, JSON.parse(stdout));
						}
					});
				};
				tasks.project = function (next) {
					exec('titanium project -o json --project-dir "' + projectRoot + '"', function (err, stdout) {
						if (err) {
							next(err);
						} else {
							next(null, JSON.parse(stdout));
						}
					});
				},
				tasks.info = function (next) {
					exec('titanium info -t titanium -o json', function (err, stdout) {
						if (err) {
							next(err);
						} else {
							next(null, JSON.parse(stdout));
						}
					});
				};
				async.parallel(tasks, function (err, result) {
					var sdkVersion,
						sdkInfo,
						projectModules,
						globalModules,
						moduleList,
						results,
						entry,
						entries,
						table,
						modules = {},
						i, len;
					if (err) {
						console.error(err);
					} else {
						if (result.info && result.modules && result.project) {
							
							// Get the SDK path
							sdkVersion = result.tiappxml['ti:app']['sdk-version'];
							if (sdkVersion) {
								sdkVersion = sdkVersion[0].match(/^([0-9]\.[0-9]\.[0-9]).*$/)[1];
							} else {
								sdkVersion = Object.keys(result.info.titanium).sort().pop();
							}
							sdkInfo = result.info.titanium[sdkVersion];
							if (!sdkInfo) {
								if (result.info.titanium[sdkVersion + '.GA']) {
									sdkVersion = sdkVersion + '.GA';
									sdkInfo = result.info.titanium[sdkVersion];
								} else {
									console.error('SDK version ' + sdkVersion + ' is not available\n');
									process.exit(1);
								}
							}
							options.sdkPath = sdkInfo.path;
							
							// Get the list of modules from the tiapp.xml
							projectModules = result.modules.project;
							globalModules = result.modules.global;
							moduleList = result.tiappxml['ti:app'].modules && result.tiappxml['ti:app'].modules[0].module;
							if (moduleList) {
								moduleList.forEach(function (module) {
									var platform = module.$.platform,
										name = module._,
										version = module.$.version,
										moduleEntry;
									if (platform) {
										if (!modules[platform]) {
											modules[platform] = {};
										}
										if (platform === 'commonjs') {
											if (projectModules && projectModules.commonjs && projectModules.commonjs[name]) {
												moduleEntry = projectModules.commonjs[name];
											} else if (globalModules && globalModules.commonjs && globalModules.commonjs[name]) {
												moduleEntry = globalModules.commonjs[name];
											}
											if (moduleEntry) {
												if (version) {
													moduleEntry = moduleEntry[version];
												} else {
													moduleEntry = moduleEntry[Object.keys(moduleEntry).sort().pop()];
												}
												modules[platform][name] = path.join(moduleEntry.modulePath, JSON.parse(
													fs.readFileSync(path.join(moduleEntry.modulePath, 'package.json'))).main + '.js');
											}
										} else {
											modules[platform][name] = '';
										}
									} else {
										if (!modules[parsedOptions.osname]) {
											modules[parsedOptions.osname] = {};
										}
										modules[parsedOptions.osname][name] = ''; // Kinda hacky, but good enough for this script
									}
								});
							}
							options.modules = modules;
						}
						options.platform = parsedOptions.osname;
						
						// Process the code
						startTime = (new Date()).getTime();
						result = CodeProcessor.process([entryPoint], plugins, options, logger);
						results = CodeProcessor.getResults();
						if (logger) {
							logger.log('info', 'Code processing finished successfully in ' + ((new Date()).getTime() - startTime) + ' ms.');
						}
						if (parsedOptions.json) {
							console.log(JSON.stringify(results, false, '\t'));
						} else {
							console.log();
							if (results.errors.length) {
								console.log('Errors');
								table = new Table({
									head: ['Description', 'File', 'Line']
								});
								for (i = 0, len = results.errors.length; i < len; i++) {
									entry = results.errors[i];
									table.push([entry.description, path.relative(projectRoot, entry.file), entry.line]);
								}
								console.log(table.toString() + '\n');
							}
							if (results.warnings.length) {
								console.log('Warnings');
								table = new Table({
									head: ['Description', 'File', 'Line']
								});
								for (i = 0, len = results.warnings.length; i < len; i++) {
									entry = results.warnings[i];
									table.push([entry.description, path.relative(projectRoot, entry.file), entry.line]);
								}
								console.log(table.toString() + '\n');
							}
							if (results.plugins['analysis-coverage']) {
								console.log('Analysis Coverage');
								table = new Table({
									head: ['File', 'Nodes Visited', 'Total Nodes']
								});
								entries = Object.keys(results.plugins['analysis-coverage'].details);
								for (i = 0, len = entries.length; i < len; i++) {
									entry = results.plugins['analysis-coverage'].details[entries[i]];
									table.push([path.relative(projectRoot, entries[i]), entry.numNodesVisited, entry.numTotalNodes]);
								}
								console.log(table.toString() + '\n Summary: ' + results.plugins['analysis-coverage'].numNodesVisited +
									' out of ' + results.plugins['analysis-coverage'].numTotalNodes + ' nodes visited\n');
							}
							if (results.plugins['ti-api-usage-finder']) {
								entries = Object.keys(results.plugins['ti-api-usage-finder']);
								if (entries.length) {
									console.log('Titanium API Usage');
									table = new Table({
										head: ['API', 'Num References']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										table.push([entries[i], results.plugins['ti-api-usage-finder'][entries[i]]]);
									}
									console.log(table.toString() + '\n');
								}
							}
							if (results.plugins['require-finder']) {
								entries = Object.keys(results.plugins['require-finder'].resolved);
								if (entries.length) {
									console.log('Required Modules Resolved');
									table = new Table({
										head: ['File Name', 'File', 'Line']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										entry = results.plugins['require-finder'].resolved[entries[i]];
										table.push([path.relative(projectRoot, entry.data.name), path.relative(projectRoot, entry.file), entry.line]);
									}
									console.log(table.toString() + '\n');
								}
								entries = Object.keys(results.plugins['require-finder'].unresolved);
								if (entries.length) {
									console.log('Required Modules Unresolved');
									table = new Table({
										head: ['File Name', 'File', 'Line']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										entry = results.plugins['require-finder'].unresolved[entries[i]];
										table.push([path.relative(projectRoot, entry.data.name), path.relative(projectRoot, entry.file), entry.line]);
									}
									console.log(table.toString() + '\n');
								}
								entries = Object.keys(results.plugins['require-finder'].missing);
								if (entries.length) {
									console.log('Required Modules Missing');
									table = new Table({
										head: ['File Name', 'File', 'Line']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										entry = results.plugins['require-finder'].missing[entries[i]];
										table.push([path.relative(projectRoot, entry.data.name), path.relative(projectRoot, entry.file), entry.line]);
									}
									console.log(table.toString() + '\n');
								}
							}
							if (results.plugins['ti-include-finder']) {
								entries = Object.keys(results.plugins['ti-include-finder'].resolved);
								if (entries.length) {
									console.log('Ti.include Files Resolved');
									table = new Table({
										head: ['File Name', 'File', 'Line']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										entry = results.plugins['ti-include-finder'].resolved[entries[i]];
										table.push([path.relative(projectRoot, entry.data.file), path.relative(projectRoot, entry.file), entry.line]);
									}
									console.log(table.toString() + '\n');
								}
								entries = Object.keys(results.plugins['ti-include-finder'].unresolved);
								if (entries.length) {
									console.log('Ti.include Files Unresolved');
									table = new Table({
										head: ['File Name', 'File', 'Line']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										entry = results.plugins['ti-include-finder'].unresolved[entries[i]];
										table.push([path.relative(projectRoot, entry.data.file), path.relative(projectRoot, entry.file), entry.line]);
									}
									console.log(table.toString() + '\n');
								}
								entries = Object.keys(results.plugins['ti-include-finder'].missing);
								if (entries.length) {
									console.log('Ti.include Files Missing');
									table = new Table({
										head: ['File Name', 'File', 'Line']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										entry = results.plugins['ti-include-finder'].missing[entries[i]];
										table.push([path.relative(projectRoot, entry.data.file), path.relative(projectRoot, entry.file), entry.line]);
									}
									console.log(table.toString() + '\n');
								}
							}
							if (results.plugins['ti-api-deprecation-finder']) {
								entries = Object.keys(results.plugins['ti-api-deprecation-finder']);
								if (entries.length) {
									console.log('Deprecated Titanium API References');
									table = new Table({
										head: ['API', 'Num References']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										table.push([entries[i], results.plugins['ti-api-deprecation-finder'][entries[i]]]);
									}
									console.log(table.toString() + '\n');
								}
							}
							if (results.plugins['ti-api-platform-validator']) {
								entries = Object.keys(results.plugins['ti-api-platform-validator']);
								if (entries.length) {
									console.log('Invalid Platform-Specific Titanium API References');
									table = new Table({
										head: ['API', 'Num References']
									});
									for (i = 0, len = entries.length; i < len; i++) {
										table.push([entries[i], results.plugins['ti-api-platform-validator'][entries[i]]]);
									}
									console.log(table.toString() + '\n');
								}
							}
							if (results.plugins['unknown-callback-detector'] && results.plugins['unknown-callback-detector'].length) {
								console.log('Unknown Callback Detector');
								table = new Table({
									head: ['File', 'Line']
								});
								entries = results.plugins['unknown-callback-detector'];
								for (i = 0, len = entries.length; i < len; i++) {
									entry = entries[i];
									table.push([path.relative(projectRoot, entry.file), entry.line]);
								}
								console.log(table.toString() + '\n');
							}
						}
						
						// Send the results to Appcelerator, if requested
						if (parsedOptions.report || parsedOptions['report-with-message']) {
							if (logger) {
								logger.log('info', 'Sending report to Appcelerator');
							}
							request({
								url: 'http://50a6d9218978de8f33002638.cloudapp-preview.appcelerator.com',
								method: 'POST',
								json: {
									id: 'bhughes@appcelerator.com',
									results: CodeProcessor.getResults(),
									message: parsedOptions['report-with-message']
								}
							}, function (error, response, body) {
								if (logger) {
									if (body && body.error) {
										logger.log('error', 'Could not send report: ' + body.error);
									} else if (body && body.success) {
										logger.log('info', 'Report sent successfully');
									} else {
										logger.log('error', 'Could not send report: invalid server response');
									}
								}
								process.exit(result && result[0] === 'normal' ? 0 : 1);
							});
						} else {
							process.exit(result && result[0] === 'normal' ? 0 : 1);
						}
					}
				});
			}
		});
	}
}

