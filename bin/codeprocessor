#!/usr/bin/env node

/**
 * @fileoverview rovides a CLI interface into the code processor API
 * @author Bryan Hughes <bhughes@appcelerator.com>
 */

// ******** Requires and File-Level Variables ********

var util = require('util'),
	path = require('path'),
	fs = require('fs'),
	exec = require('child_process').exec,
	
	nomnom = require('nomnom'),
	winston = require('winston'),
	wrench = require('wrench'),
	async = require('async'),
	xml2js = require('xml2js'),
	
	CodeProcessor = require(path.resolve(path.join(__dirname, '..'))),

// ******** CLI Options Parsing ********

// Process the cli args
	parsedOptions = nomnom
		.option('plugin', {
			abbr: 'p',
			metavar: 'MODULE_NAME',
			list: true,
			type: 'string',
			help: 'Name of the plugin module to include'
		})
		.option('config', {
			abbr: 'c',
			metavar: 'CONFIG_OPTION=VALUE',
			list: true,
			help: 'Processor options, defined as "key=value"'
		})
		.option('verbose', {
			abbr: 'v',
			flag: true,
			help: 'Enable verbose logging. Equivalent to "-l debug"'
		})
		.option('log-level', {
			abbr: 'l',
			metavar: 'LOG_LEVEL',
			default: 'info',
			help: 'The logging level',
			choices: ['error', 'warn', 'notice', 'info', 'debug', 'trace']
		})
		.option('osname', {
			abbr: 'o',
			metavar: 'PLATFORM',
			help: 'The name of the OS being built-for. Reflected in code via Ti.Platform.osname',
			choices: ['ios', 'iphone', 'ipad', 'android', 'mobileweb']
		})
		.script('codeprocessor [project-dir]')
		.help('Processes the supplied project using the given plugins.')
		.nom(),
	i,
	len,
	configOption,
	options = {},
	projectRoot = '.',
	plugins,
	entryPoint,
	startTime,
	result,
	logger;

// Create the logger
logger = new (winston.Logger)({
	transports: [
		new (winston.transports.Console)({ level: parsedOptions.verbose ? 'trace' : parsedOptions['log-level'] })
	],
	levels: {
		trace: 0, 
		debug: 1,
		info: 2,
		notice: 3,
		warn: 4,
		error: 5 
	}
});

// Parse the config options
if (parsedOptions.config) {
	for(i = 0, len = parsedOptions.config.length; i < len; i++) {
		configOption = parsedOptions.config[i].split('=');
		if (configOption.length !== 2) {
			logger.log('error', 'Invalid option "' + parsedOptions.config[i] + '"\n');
			process.exit(1);
		}
		switch(configOption[0]) {
			case 'invokeMethods': 
				options.invokeMethods = configOption[1] === 'true';
				break;
			case 'evaluateLoops':
				options.evaluateLoops = configOption[1] === 'true';
				break;
			case 'maxLoopIterations':
				options.maxLoopIterations = parseInt(configOption[1]);
				break;
			case 'executionTimeLimit':
				options.executionTimeLimit = parseInt(configOption[1]);
				break;
			case 'maxRecursionLimit':
				options.maxRecursionLimit = parseInt(configOption[1]);
				break;
			case 'exactMode':
				options.exactMode = configOption[1] === 'true';
				break;
			case 'nativeExceptionRecovery':
				options.nativeExceptionRecovery = configOption[1] === 'true';
				break;
			default:
				logger.log('error', 'Invalid option "' + parsedOptions.config[i] + '"\n');
				process.exit(1);
		}
	}
}

// Calculate the project root
if (parsedOptions[0]) {
	projectRoot = parsedOptions[0];
}
projectRoot = path.resolve(projectRoot);

// Make sure that the project exists
if (!fs.existsSync(projectRoot)) {
	throw new Error('Error: project root "' + projectRoot + '" does not exist.');
}

// Get the list of plugins
plugins = parsedOptions.plugin;

// Check if we are processing a project or a single file
if (/\.js$/.test(projectRoot)) {
	startTime = (new Date()).getTime();
	options.platform = parsedOptions.osname;
	result = CodeProcessor.process([projectRoot], plugins, options, logger);
	logger.log('info', 'Code processing finished successfully in ' + ((new Date()).getTime() - startTime) + ' ms.');
	logger.log('info', util.inspect(CodeProcessor.getResults(), false, 4));
				
	process.exit(result && result[0] === 'normal' ? 0 : 1);
} else {
	entryPoint = path.join(projectRoot, 'Resources', 'app.js');
	if (!fs.existsSync(entryPoint)) {
		throw new Error('Error: Project entry point "' + entryPoint + '" does not exist.');
	} else {
		logger.info('Analyzing project');
		exec('titanium', function (err) {
			var tasks = {
				tiappxml: function (next) {
					(new xml2js.Parser()).parseString(fs.readFileSync(path.join(projectRoot, 'tiapp.xml')), function (err, data) {
						if (err) {
							next(err);
						} else {
							next(null, data);
						}
					});
				}
			};

			if (err) {
				console.warn('Could not run the "titanium" command, results will be limited')
			} else {
				tasks['modules'] = function (next) {
					exec('titanium module -o json --project-dir ' + projectRoot, function (err, stdout, stderr) {
						if (err) {
							next(err);
						} else {
							next(null, JSON.parse(stdout));
						}
					});
				};
				tasks['project'] = function (next) {
					exec('titanium project -o json --project-dir ' + projectRoot, function (err, stdout, stderr) {
						if (err) {
							next(err);
						} else {
							next(null, JSON.parse(stdout));
						}
					});
				},
				tasks['info'] = function (next) {
					exec('titanium info -t titanium -o json', function (err, stdout, stderr) {
						if (err) {
							next(err);
						} else {
							next(null, JSON.parse(stdout));
						}
					});
				}
			}

			async.parallel(tasks, function (err, result) {
				var sdkVersion,
					sdkInfo,
					projectModules,
					globalModules,
					moduleList,
					modules = {},
					i, len;
				if (err) {
					console.error(err);
				} else {
					if (result.info && result.modules && result.project) {
						
						// Get the SDK path
						sdkVersion = result.tiappxml['ti:app']['sdk-version'];
						if (sdkVersion) {
							sdkVersion = sdkVersion[0].match(/^([0-9]\.[0-9]\.[0-9]).*$/)[1];
						} else {
							sdkVersion = Object.keys(result.info.titanium).sort().pop();
						}
						sdkInfo = result.info.titanium[sdkVersion];
						if (!sdkInfo) {
							if (result.info.titanium[sdkVersion + '.GA']) {
								sdkVersion = sdkVersion + '.GA';
								sdkInfo = result.info.titanium[sdkVersion];
							} else {
								console.error('SDK version ' + sdkVersion + ' is not available\n');
								process.exit(1);
							}
						}
						options.sdkPath = sdkInfo.path;
						
						// Get the list of modules from the tiapp.xml
						projectModules = result.modules.project;
						globalModules = result.modules.global;
						moduleList = result.tiappxml['ti:app'].modules && result.tiappxml['ti:app'].modules[0].module;
						if (moduleList) {
							moduleList.forEach(function (module) {
								var platform = module.$.platform,
									name = module._,
									version = module.$.version,
									moduleEntry;
								if (platform) {
									if (!modules[platform]) {
										modules[platform] = {};
									}
									if (platform === 'commonjs') {
										if (projectModules && projectModules['commonjs'] && projectModules['commonjs'][name]) {
											moduleEntry = projectModules['commonjs'][name];
										} else if (globalModules && globalModules['commonjs'] && globalModules['commonjs'][name]) {
											moduleEntry = globalModules['commonjs'][name];
										}
										if (moduleEntry) {
											if (version) {
												moduleEntry = moduleEntry[version];
											} else {
												moduleEntry = moduleEntry[Object.keys(moduleEntry).sort().pop()];
											}
											modules[platform][name] = path.join(moduleEntry.modulePath, JSON.parse(
												fs.readFileSync(path.join(moduleEntry.modulePath, 'package.json'))).main + '.js');
										}
									} else {
										modules[platform][name] = '';
									}
								} else {
									if (!modules[parsedOptions.osname]) {
										modules[parsedOptions.osname] = {};
									}
									modules[parsedOptions.osname][name] = ''; // Kinda hacky, but good enough for this script
								}
							});
						}
						options.modules = modules;
					}
					options.platform = parsedOptions.osname;
					
					// Process the code
					startTime = (new Date()).getTime();
					result = CodeProcessor.process([entryPoint], plugins, options, logger);
					logger.log('info', 'Code processing finished successfully in ' + ((new Date()).getTime() - startTime) + ' ms.');
					console.log(JSON.stringify(CodeProcessor.getResults(), false, '\t'));
					process.exit(result && result[0] === 'normal' ? 0 : 1);
				}
			});
		});
	}
}

